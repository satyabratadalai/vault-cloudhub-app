pipeline {
    agent any
    environment {
        // Include all necessary --add-opens options
        MAVEN_OPTS = "--add-opens=java.base/sun.net.www.protocol.jar=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED"
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/satyabratadalai/vault-cloudhub-app.git', branch: 'main'
            }
        }
        
        stage('Modifying POM File : Pre Deployment') {
            steps {
                script {

                    def vaultPath = '' 
                    echo "Environment Selected : ${ENV}"
                    if ("${ENV}" == 'DEV') {
                        echo "FOR DEV"
                        vaultPath = "secret/mulesoft-dev"
                    } else if ("${ENV}" == 'UAT') {
                        echo "FOR UAT"
                        vaultPath = "secret/mulesoft-uat"
                    } else if ("${ENV}" == 'PROD') {
                        echo "FOR PROD"
                        vaultPath = "secret/mulesoft-prod"
                    } else {
                        echo "INVALID ENV"
                    }



                    if (vaultPath){
                        echo "Using Vault Path: ${vaultPath}"
                        // Initialize Vault access
                        def secrets = [
                            [$class: 'VaultSecret', path: vaultPath, secretValues: [
                                [$class: 'VaultSecretValue', envVar: 'username', vaultKey: 'database.username'],
                                [$class: 'VaultSecretValue', envVar: 'password', vaultKey: 'database.password']
                            ]]
                        ]
                        echo "WORKING"
                        // Fetch secrets from Vault
                        withVault([vaultSecrets: secrets, vaultConfigurationId: 'vault-token']) {
                            def databaseuname = env.username
                            def databasepassword = env.password
                        }
                    } else {
                        echo "Vault path not set due to invalid environment"
                    }



                    // Load the pom.xml file content
                    def pomContent = readFile 'pom.xml'
                    
                    // Modify the content using a safer Groovy string manipulation
                    pomContent = pomContent.replaceFirst('<database.username>.*?</database.username>', '<database.username>${databaseuname}</database.username>')
                    pomContent = pomContent.replaceFirst('<database.password>.*?</database.password>', '<database.password>${databasepassword}</database.password>')

                    // Write the modified content back to pom.xml
                    writeFile file: 'pom.xml', text: pomContent
                }
            }
        }

        stage('Build') {
            steps {
                withMaven(maven: 'Maven', mavenSettingsConfig: '3802749b-765f-4b02-86ab-bcf94c417beb') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Upload to Exchange') {
            steps {
                echo "LETS DEPLOY"
                withMaven(maven: 'Maven', mavenSettingsConfig: '3802749b-765f-4b02-86ab-bcf94c417beb') {
                    sh 'mvn clean deploy'
                }
            }
        }

        stage('Deploy To Cloudhub 2.0') {
            steps {
                echo "LETS DEPLOY"
                withMaven(maven: 'Maven', mavenSettingsConfig: '3802749b-765f-4b02-86ab-bcf94c417beb') {
                    sh 'mvn clean deploy -DmuleDeploy'
                }
            }
        }
    }
}
